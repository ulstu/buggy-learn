import * as Blockly from 'blockly';
import { pythonGenerator } from 'blockly/python';

// Debug log to confirm Blockly.Xml.textToDom is available
console.log("Blockly.Xml.textToDom:", typeof Blockly.Xml.textToDom);

// ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –±–ª–æ–∫–æ–≤
Blockly.defineBlocksWithJsonArray([
    {
        "type": "move_forward",
        "message0": "–î–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥ –Ω–∞ %1 –º—Å",
        "args0": [
            {
                "type": "input_value",
                "name": "DURATION",
                "check": "Number"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 160,
        "tooltip": "–î–≤–∏–∂–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–∞ –≤–ø–µ—Ä—ë–¥ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    },
    {
        "type": "move_backward",
        "message0": "–î–≤–∏–≥–∞—Ç—å—Å—è –Ω–∞–∑–∞–¥ –Ω–∞ %1 –º—Å",
        "args0": [
            {
                "type": "input_value",
                "name": "DURATION",
                "check": "Number"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 180,
        "tooltip": "–î–≤–∏–∂–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–∞ –Ω–∞–∑–∞–¥ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    },
    {
        "type": "turn_left",
        "message0": "–ü–æ–≤–µ—Ä–Ω—É—Ç—å –≤–ª–µ–≤–æ –Ω–∞ %1 –º—Å",
        "args0": [
            {
                "type": "input_value",
                "name": "DURATION",
                "check": "Number"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 120,
        "tooltip": "–ü–æ–≤–æ—Ä–æ—Ç —Ä–æ–±–æ—Ç–∞ –≤–ª–µ–≤–æ"
    },
    {
        "type": "turn_right",
        "message0": "–ü–æ–≤–µ—Ä–Ω—É—Ç—å –≤–ø—Ä–∞–≤–æ –Ω–∞ %1 –º—Å",
        "args0": [
            {
                "type": "input_value",
                "name": "DURATION",
                "check": "Number"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 240,
        "tooltip": "–ü–æ–≤–æ—Ä–æ—Ç —Ä–æ–±–æ—Ç–∞ –≤–ø—Ä–∞–≤–æ"
    }
]);

console.log("‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –±–ª–æ–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ Blockly");

// ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã Python –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –±–ª–æ–∫–æ–≤
pythonGenerator.forBlock['move_forward'] = function(block) {
    const duration = pythonGenerator.valueToCode(block, 'DURATION', pythonGenerator.ORDER_NONE) || '1000';
    return `MoveForward(${duration})\n`;
};

pythonGenerator.forBlock['move_backward'] = function(block) {
    const duration = pythonGenerator.valueToCode(block, 'DURATION', pythonGenerator.ORDER_NONE) || '1000';
    return `MoveBackward(${duration})\n`;
};

pythonGenerator.forBlock['turn_left'] = function(block) {
    const duration = pythonGenerator.valueToCode(block, 'DURATION', pythonGenerator.ORDER_NONE) || '1000';
    return `TurnLeft(${duration})\n`;
};

pythonGenerator.forBlock['turn_right'] = function(block) {
    const duration = pythonGenerator.valueToCode(block, 'DURATION', pythonGenerator.ORDER_NONE) || '1000';
    return `TurnRight(${duration})\n`;
};

console.log("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã Python –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Blockly —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
function initBlockly() {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ Blockly...");

    const toolbox = {
        "kind": "flyoutToolbox",
        "contents": [
            {"kind": "block", "type": "move_forward"},
            {"kind": "block", "type": "move_backward"},
            {"kind": "block", "type": "turn_left"},
            {"kind": "block", "type": "turn_right"},
            {"kind": "block", "type": "controls_if", "label": "–ï–°–õ–ò"},
            {"kind": "block", "type": "logic_compare", "label": "–°–†–ê–í–ù–ï–ù–ò–ï"},
            {"kind": "block", "type": "controls_repeat_ext", "label": "–ü–û–í–¢–û–†–ò–¢–¨"},
            {"kind": "block", "type": "math_number", "label": "–ß–ò–°–õ–û"},
            {"kind": "block", "type": "math_arithmetic", "label": "–ú–ê–¢–ï–ú–ê–¢–ò–ö–ê"},
            {"kind": "block", "type": "variables_get", "label": "–ü–û–õ–£–ß–ò–¢–¨ –ü–ï–†–ï–ú–ï–ù–ù–£–Æ"},
            {"kind": "block", "type": "variables_set", "label": "–£–°–¢–ê–ù–û–í–ò–¢–¨ –ü–ï–†–ï–ú–ï–ù–ù–£–Æ"}
        ]
    };

    const workspace = Blockly.inject('blocklyDiv', {
        toolbox: toolbox,
        toolboxPosition: 'start',
        trashcan: true,
        scrollbars: true,
        sounds: false
    });

    console.log("‚úÖ Blockly —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –±–ª–æ–∫–æ–≤.");
    return workspace;
}

// ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
export { Blockly, pythonGenerator, initBlockly };
